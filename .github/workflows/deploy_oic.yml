name: Deploy OIC Integrations to Dev (Committed Files Only)

on:
  push:
    branches:
      - develop # This workflow will run whenever code is pushed to the 'develop' branch

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub-hosted runner (Linux)

    steps:
      - name: Checkout repository
        # Checks out your repository code onto the runner.
        # fetch-depth: 0 is crucial to get the full commit history for git diff.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get committed .iar files
        id: get_iar_files # Assign an ID to this step to access its outputs
        run: |
          echo "Detecting .iar files committed in this push..."
          
          # Get the list of files changed in the current push.
          # github.event.before is the commit SHA before the push.
          # github.sha is the SHA of the latest commit in the push.
          # This command lists all files added, modified, or deleted between these two points.
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          
          # Filter for .iar files and join them with commas.
          # Initialize an empty string for the list of .iar files.
          IAR_FILES_LIST=""
          
          # Loop through each changed file
          for file in $CHANGED_FILES; do
            # Check if the file ends with .iar (case-insensitive check for robustness)
            if [[ "${file,,}" == *.iar ]]; then # ${file,,} converts to lowercase
              # Append the file path to the list, adding a comma if it's not the first file
              if [[ -n "$IAR_FILES_LIST" ]]; then
                IAR_FILES_LIST+=","
              fi
              IAR_FILES_LIST+="$file"
            fi
          done
          
          echo "Detected .iar files in commit: $IAR_FILES_LIST"
          
          # Set the list of .iar files as an output of this step.
          # This output can then be accessed by subsequent steps.
          echo "iar_files_to_deploy=$IAR_FILES_LIST" >> $GITHUB_OUTPUT

      - name: Check if any .iar files were found
        # This step conditionally runs based on whether any .iar files were detected.
        # If no .iar files, the workflow will succeed without attempting deployment.
        if: steps.get_iar_files.outputs.iar_files_to_deploy == ''
        run: |
          echo "No .iar files were committed in this push. Skipping OIC deployment."
          # exit 0 ensures the job succeeds even if no .iar files are found.
          exit 0

      - name: Set up Python
        # Installs Python on the runner.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a specific Python version, e.g., '3.9', '3.10', '3.11'

      - name: Install Python dependencies
        # Installs the 'requests' library required by your script.
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy OIC Integrations
        # This step executes your Python script.
        # Environment variables are passed from GitHub Secrets and step outputs.
        env:
          OIC_URL: ${{ secrets.OIC_URL }}
          # Pass the dynamically determined comma-separated list of .iar files.
          IAR_FILES: ${{ steps.get_iar_files.outputs.iar_files_to_deploy }}
          OIC_TOKEN_URL: ${{ secrets.OIC_TOKEN_URL }}
          OIC_CLIENT_ID: ${{ secrets.OIC_CLIENT_ID }}
          OIC_CLIENT_SECRET: ${{ secrets.OIC_CLIENT_SECRET }}
          OIC_SCOPE: ${{ secrets.OIC_SCOPE }}
          OIC_INSTANCE_NAME: ${{ secrets.OIC_INSTANCE_NAME }}
          OIC_ENABLE_ASYNC_ACTIVATION: ${{ secrets.OIC_ENABLE_ASYNC_ACTIVATION }}
          OIC_FALLBACK_BEARER_TOKEN: ${{ secrets.OIC_FALLBACK_BEARER_TOKEN }}
        run: python deploy_oic_integration.py
        # Adjust the path to your script if it's not in the root of the repository.
        # e.g., run: python scripts/deploy_oic_integration.py
